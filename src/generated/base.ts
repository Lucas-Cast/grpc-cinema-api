/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: base.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace base {
    export class Genre extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            movies?: Movie[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("movies" in data && data.movies != undefined) {
                    this.movies = data.movies;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get movies() {
            return pb_1.Message.getRepeatedWrapperField(this, Movie, 3) as Movie[];
        }
        set movies(value: Movie[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            movies?: ReturnType<typeof Movie.prototype.toObject>[];
        }): Genre {
            const message = new Genre({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.movies != null) {
                message.movies = data.movies.map(item => Movie.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                movies?: ReturnType<typeof Movie.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.movies != null) {
                data.movies = this.movies.map((item: Movie) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.movies.length)
                writer.writeRepeatedMessage(3, this.movies, (item: Movie) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Genre {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Genre();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.movies, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Movie.deserialize(reader), Movie));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Genre {
            return Genre.deserialize(bytes);
        }
    }
    export class Movie extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            director?: string;
            releaseYear?: number;
            genres?: Genre[];
            actors?: Actor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("director" in data && data.director != undefined) {
                    this.director = data.director;
                }
                if ("releaseYear" in data && data.releaseYear != undefined) {
                    this.releaseYear = data.releaseYear;
                }
                if ("genres" in data && data.genres != undefined) {
                    this.genres = data.genres;
                }
                if ("actors" in data && data.actors != undefined) {
                    this.actors = data.actors;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get director() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set director(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get releaseYear() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set releaseYear(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get genres() {
            return pb_1.Message.getRepeatedWrapperField(this, Genre, 5) as Genre[];
        }
        set genres(value: Genre[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get actors() {
            return pb_1.Message.getRepeatedWrapperField(this, Actor, 6) as Actor[];
        }
        set actors(value: Actor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            director?: string;
            releaseYear?: number;
            genres?: ReturnType<typeof Genre.prototype.toObject>[];
            actors?: ReturnType<typeof Actor.prototype.toObject>[];
        }): Movie {
            const message = new Movie({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.director != null) {
                message.director = data.director;
            }
            if (data.releaseYear != null) {
                message.releaseYear = data.releaseYear;
            }
            if (data.genres != null) {
                message.genres = data.genres.map(item => Genre.fromObject(item));
            }
            if (data.actors != null) {
                message.actors = data.actors.map(item => Actor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                director?: string;
                releaseYear?: number;
                genres?: ReturnType<typeof Genre.prototype.toObject>[];
                actors?: ReturnType<typeof Actor.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.director != null) {
                data.director = this.director;
            }
            if (this.releaseYear != null) {
                data.releaseYear = this.releaseYear;
            }
            if (this.genres != null) {
                data.genres = this.genres.map((item: Genre) => item.toObject());
            }
            if (this.actors != null) {
                data.actors = this.actors.map((item: Actor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.director.length)
                writer.writeString(3, this.director);
            if (this.releaseYear != 0)
                writer.writeInt32(4, this.releaseYear);
            if (this.genres.length)
                writer.writeRepeatedMessage(5, this.genres, (item: Genre) => item.serialize(writer));
            if (this.actors.length)
                writer.writeRepeatedMessage(6, this.actors, (item: Actor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Movie {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Movie();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.director = reader.readString();
                        break;
                    case 4:
                        message.releaseYear = reader.readInt32();
                        break;
                    case 5:
                        reader.readMessage(message.genres, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Genre.deserialize(reader), Genre));
                        break;
                    case 6:
                        reader.readMessage(message.actors, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Actor.deserialize(reader), Actor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Movie {
            return Movie.deserialize(bytes);
        }
    }
    export class Actor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            birthYear?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("birthYear" in data && data.birthYear != undefined) {
                    this.birthYear = data.birthYear;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get birthYear() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set birthYear(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            birthYear?: number;
        }): Actor {
            const message = new Actor({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.birthYear != null) {
                message.birthYear = data.birthYear;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                birthYear?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.birthYear != null) {
                data.birthYear = this.birthYear;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.birthYear != 0)
                writer.writeInt32(3, this.birthYear);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Actor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Actor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.birthYear = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Actor {
            return Actor.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
}
