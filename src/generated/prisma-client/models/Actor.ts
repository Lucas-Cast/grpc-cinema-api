
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Actor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Actor
 * 
 */
export type ActorModel = runtime.Types.Result.DefaultSelection<Prisma.$ActorPayload>

export type AggregateActor = {
  _count: ActorCountAggregateOutputType | null
  _avg: ActorAvgAggregateOutputType | null
  _sum: ActorSumAggregateOutputType | null
  _min: ActorMinAggregateOutputType | null
  _max: ActorMaxAggregateOutputType | null
}

export type ActorAvgAggregateOutputType = {
  id: number | null
  birthYear: number | null
  movieId: number | null
}

export type ActorSumAggregateOutputType = {
  id: number | null
  birthYear: number | null
  movieId: number | null
}

export type ActorMinAggregateOutputType = {
  id: number | null
  name: string | null
  birthYear: number | null
  createdAt: Date | null
  updatedAt: Date | null
  movieId: number | null
}

export type ActorMaxAggregateOutputType = {
  id: number | null
  name: string | null
  birthYear: number | null
  createdAt: Date | null
  updatedAt: Date | null
  movieId: number | null
}

export type ActorCountAggregateOutputType = {
  id: number
  name: number
  birthYear: number
  createdAt: number
  updatedAt: number
  movieId: number
  _all: number
}


export type ActorAvgAggregateInputType = {
  id?: true
  birthYear?: true
  movieId?: true
}

export type ActorSumAggregateInputType = {
  id?: true
  birthYear?: true
  movieId?: true
}

export type ActorMinAggregateInputType = {
  id?: true
  name?: true
  birthYear?: true
  createdAt?: true
  updatedAt?: true
  movieId?: true
}

export type ActorMaxAggregateInputType = {
  id?: true
  name?: true
  birthYear?: true
  createdAt?: true
  updatedAt?: true
  movieId?: true
}

export type ActorCountAggregateInputType = {
  id?: true
  name?: true
  birthYear?: true
  createdAt?: true
  updatedAt?: true
  movieId?: true
  _all?: true
}

export type ActorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Actor to aggregate.
   */
  where?: Prisma.ActorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorOrderByWithRelationInput | Prisma.ActorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ActorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Actors
  **/
  _count?: true | ActorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ActorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ActorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ActorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ActorMaxAggregateInputType
}

export type GetActorAggregateType<T extends ActorAggregateArgs> = {
      [P in keyof T & keyof AggregateActor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateActor[P]>
    : Prisma.GetScalarType<T[P], AggregateActor[P]>
}




export type ActorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActorWhereInput
  orderBy?: Prisma.ActorOrderByWithAggregationInput | Prisma.ActorOrderByWithAggregationInput[]
  by: Prisma.ActorScalarFieldEnum[] | Prisma.ActorScalarFieldEnum
  having?: Prisma.ActorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ActorCountAggregateInputType | true
  _avg?: ActorAvgAggregateInputType
  _sum?: ActorSumAggregateInputType
  _min?: ActorMinAggregateInputType
  _max?: ActorMaxAggregateInputType
}

export type ActorGroupByOutputType = {
  id: number
  name: string
  birthYear: number | null
  createdAt: Date
  updatedAt: Date
  movieId: number | null
  _count: ActorCountAggregateOutputType | null
  _avg: ActorAvgAggregateOutputType | null
  _sum: ActorSumAggregateOutputType | null
  _min: ActorMinAggregateOutputType | null
  _max: ActorMaxAggregateOutputType | null
}

type GetActorGroupByPayload<T extends ActorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ActorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ActorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ActorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ActorGroupByOutputType[P]>
      }
    >
  >



export type ActorWhereInput = {
  AND?: Prisma.ActorWhereInput | Prisma.ActorWhereInput[]
  OR?: Prisma.ActorWhereInput[]
  NOT?: Prisma.ActorWhereInput | Prisma.ActorWhereInput[]
  id?: Prisma.IntFilter<"Actor"> | number
  name?: Prisma.StringFilter<"Actor"> | string
  birthYear?: Prisma.IntNullableFilter<"Actor"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Actor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Actor"> | Date | string
  movieId?: Prisma.IntNullableFilter<"Actor"> | number | null
  Movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
}

export type ActorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  birthYear?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  movieId?: Prisma.SortOrderInput | Prisma.SortOrder
  Movie?: Prisma.MovieOrderByWithRelationInput
}

export type ActorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ActorWhereInput | Prisma.ActorWhereInput[]
  OR?: Prisma.ActorWhereInput[]
  NOT?: Prisma.ActorWhereInput | Prisma.ActorWhereInput[]
  name?: Prisma.StringFilter<"Actor"> | string
  birthYear?: Prisma.IntNullableFilter<"Actor"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Actor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Actor"> | Date | string
  movieId?: Prisma.IntNullableFilter<"Actor"> | number | null
  Movie?: Prisma.XOR<Prisma.MovieNullableScalarRelationFilter, Prisma.MovieWhereInput> | null
}, "id">

export type ActorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  birthYear?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  movieId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ActorCountOrderByAggregateInput
  _avg?: Prisma.ActorAvgOrderByAggregateInput
  _max?: Prisma.ActorMaxOrderByAggregateInput
  _min?: Prisma.ActorMinOrderByAggregateInput
  _sum?: Prisma.ActorSumOrderByAggregateInput
}

export type ActorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ActorScalarWhereWithAggregatesInput | Prisma.ActorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ActorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ActorScalarWhereWithAggregatesInput | Prisma.ActorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Actor"> | number
  name?: Prisma.StringWithAggregatesFilter<"Actor"> | string
  birthYear?: Prisma.IntNullableWithAggregatesFilter<"Actor"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Actor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Actor"> | Date | string
  movieId?: Prisma.IntNullableWithAggregatesFilter<"Actor"> | number | null
}

export type ActorCreateInput = {
  name: string
  birthYear?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Movie?: Prisma.MovieCreateNestedOneWithoutActorsInput
}

export type ActorUncheckedCreateInput = {
  id?: number
  name: string
  birthYear?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  movieId?: number | null
}

export type ActorUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Movie?: Prisma.MovieUpdateOneWithoutActorsNestedInput
}

export type ActorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  movieId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ActorCreateManyInput = {
  id?: number
  name: string
  birthYear?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  movieId?: number | null
}

export type ActorUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  movieId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type ActorListRelationFilter = {
  every?: Prisma.ActorWhereInput
  some?: Prisma.ActorWhereInput
  none?: Prisma.ActorWhereInput
}

export type ActorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ActorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  birthYear?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
}

export type ActorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  birthYear?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
}

export type ActorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  birthYear?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
}

export type ActorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  birthYear?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
}

export type ActorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  birthYear?: Prisma.SortOrder
  movieId?: Prisma.SortOrder
}

export type ActorCreateNestedManyWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.ActorCreateWithoutMovieInput, Prisma.ActorUncheckedCreateWithoutMovieInput> | Prisma.ActorCreateWithoutMovieInput[] | Prisma.ActorUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ActorCreateOrConnectWithoutMovieInput | Prisma.ActorCreateOrConnectWithoutMovieInput[]
  createMany?: Prisma.ActorCreateManyMovieInputEnvelope
  connect?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
}

export type ActorUncheckedCreateNestedManyWithoutMovieInput = {
  create?: Prisma.XOR<Prisma.ActorCreateWithoutMovieInput, Prisma.ActorUncheckedCreateWithoutMovieInput> | Prisma.ActorCreateWithoutMovieInput[] | Prisma.ActorUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ActorCreateOrConnectWithoutMovieInput | Prisma.ActorCreateOrConnectWithoutMovieInput[]
  createMany?: Prisma.ActorCreateManyMovieInputEnvelope
  connect?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
}

export type ActorUpdateManyWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.ActorCreateWithoutMovieInput, Prisma.ActorUncheckedCreateWithoutMovieInput> | Prisma.ActorCreateWithoutMovieInput[] | Prisma.ActorUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ActorCreateOrConnectWithoutMovieInput | Prisma.ActorCreateOrConnectWithoutMovieInput[]
  upsert?: Prisma.ActorUpsertWithWhereUniqueWithoutMovieInput | Prisma.ActorUpsertWithWhereUniqueWithoutMovieInput[]
  createMany?: Prisma.ActorCreateManyMovieInputEnvelope
  set?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  disconnect?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  delete?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  connect?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  update?: Prisma.ActorUpdateWithWhereUniqueWithoutMovieInput | Prisma.ActorUpdateWithWhereUniqueWithoutMovieInput[]
  updateMany?: Prisma.ActorUpdateManyWithWhereWithoutMovieInput | Prisma.ActorUpdateManyWithWhereWithoutMovieInput[]
  deleteMany?: Prisma.ActorScalarWhereInput | Prisma.ActorScalarWhereInput[]
}

export type ActorUncheckedUpdateManyWithoutMovieNestedInput = {
  create?: Prisma.XOR<Prisma.ActorCreateWithoutMovieInput, Prisma.ActorUncheckedCreateWithoutMovieInput> | Prisma.ActorCreateWithoutMovieInput[] | Prisma.ActorUncheckedCreateWithoutMovieInput[]
  connectOrCreate?: Prisma.ActorCreateOrConnectWithoutMovieInput | Prisma.ActorCreateOrConnectWithoutMovieInput[]
  upsert?: Prisma.ActorUpsertWithWhereUniqueWithoutMovieInput | Prisma.ActorUpsertWithWhereUniqueWithoutMovieInput[]
  createMany?: Prisma.ActorCreateManyMovieInputEnvelope
  set?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  disconnect?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  delete?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  connect?: Prisma.ActorWhereUniqueInput | Prisma.ActorWhereUniqueInput[]
  update?: Prisma.ActorUpdateWithWhereUniqueWithoutMovieInput | Prisma.ActorUpdateWithWhereUniqueWithoutMovieInput[]
  updateMany?: Prisma.ActorUpdateManyWithWhereWithoutMovieInput | Prisma.ActorUpdateManyWithWhereWithoutMovieInput[]
  deleteMany?: Prisma.ActorScalarWhereInput | Prisma.ActorScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ActorCreateWithoutMovieInput = {
  name: string
  birthYear?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActorUncheckedCreateWithoutMovieInput = {
  id?: number
  name: string
  birthYear?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActorCreateOrConnectWithoutMovieInput = {
  where: Prisma.ActorWhereUniqueInput
  create: Prisma.XOR<Prisma.ActorCreateWithoutMovieInput, Prisma.ActorUncheckedCreateWithoutMovieInput>
}

export type ActorCreateManyMovieInputEnvelope = {
  data: Prisma.ActorCreateManyMovieInput | Prisma.ActorCreateManyMovieInput[]
  skipDuplicates?: boolean
}

export type ActorUpsertWithWhereUniqueWithoutMovieInput = {
  where: Prisma.ActorWhereUniqueInput
  update: Prisma.XOR<Prisma.ActorUpdateWithoutMovieInput, Prisma.ActorUncheckedUpdateWithoutMovieInput>
  create: Prisma.XOR<Prisma.ActorCreateWithoutMovieInput, Prisma.ActorUncheckedCreateWithoutMovieInput>
}

export type ActorUpdateWithWhereUniqueWithoutMovieInput = {
  where: Prisma.ActorWhereUniqueInput
  data: Prisma.XOR<Prisma.ActorUpdateWithoutMovieInput, Prisma.ActorUncheckedUpdateWithoutMovieInput>
}

export type ActorUpdateManyWithWhereWithoutMovieInput = {
  where: Prisma.ActorScalarWhereInput
  data: Prisma.XOR<Prisma.ActorUpdateManyMutationInput, Prisma.ActorUncheckedUpdateManyWithoutMovieInput>
}

export type ActorScalarWhereInput = {
  AND?: Prisma.ActorScalarWhereInput | Prisma.ActorScalarWhereInput[]
  OR?: Prisma.ActorScalarWhereInput[]
  NOT?: Prisma.ActorScalarWhereInput | Prisma.ActorScalarWhereInput[]
  id?: Prisma.IntFilter<"Actor"> | number
  name?: Prisma.StringFilter<"Actor"> | string
  birthYear?: Prisma.IntNullableFilter<"Actor"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Actor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Actor"> | Date | string
  movieId?: Prisma.IntNullableFilter<"Actor"> | number | null
}

export type ActorCreateManyMovieInput = {
  id?: number
  name: string
  birthYear?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ActorUpdateWithoutMovieInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorUncheckedUpdateWithoutMovieInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ActorUncheckedUpdateManyWithoutMovieInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  birthYear?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ActorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  birthYear?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  movieId?: boolean
  Movie?: boolean | Prisma.Actor$MovieArgs<ExtArgs>
}, ExtArgs["result"]["actor"]>

export type ActorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  birthYear?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  movieId?: boolean
  Movie?: boolean | Prisma.Actor$MovieArgs<ExtArgs>
}, ExtArgs["result"]["actor"]>

export type ActorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  birthYear?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  movieId?: boolean
  Movie?: boolean | Prisma.Actor$MovieArgs<ExtArgs>
}, ExtArgs["result"]["actor"]>

export type ActorSelectScalar = {
  id?: boolean
  name?: boolean
  birthYear?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  movieId?: boolean
}

export type ActorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "birthYear" | "createdAt" | "updatedAt" | "movieId", ExtArgs["result"]["actor"]>
export type ActorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Movie?: boolean | Prisma.Actor$MovieArgs<ExtArgs>
}
export type ActorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Movie?: boolean | Prisma.Actor$MovieArgs<ExtArgs>
}
export type ActorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Movie?: boolean | Prisma.Actor$MovieArgs<ExtArgs>
}

export type $ActorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Actor"
  objects: {
    Movie: Prisma.$MoviePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    birthYear: number | null
    createdAt: Date
    updatedAt: Date
    movieId: number | null
  }, ExtArgs["result"]["actor"]>
  composites: {}
}

export type ActorGetPayload<S extends boolean | null | undefined | ActorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ActorPayload, S>

export type ActorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ActorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ActorCountAggregateInputType | true
  }

export interface ActorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Actor'], meta: { name: 'Actor' } }
  /**
   * Find zero or one Actor that matches the filter.
   * @param {ActorFindUniqueArgs} args - Arguments to find a Actor
   * @example
   * // Get one Actor
   * const actor = await prisma.actor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ActorFindUniqueArgs>(args: Prisma.SelectSubset<T, ActorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Actor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ActorFindUniqueOrThrowArgs} args - Arguments to find a Actor
   * @example
   * // Get one Actor
   * const actor = await prisma.actor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ActorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ActorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Actor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorFindFirstArgs} args - Arguments to find a Actor
   * @example
   * // Get one Actor
   * const actor = await prisma.actor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ActorFindFirstArgs>(args?: Prisma.SelectSubset<T, ActorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Actor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorFindFirstOrThrowArgs} args - Arguments to find a Actor
   * @example
   * // Get one Actor
   * const actor = await prisma.actor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ActorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ActorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Actors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Actors
   * const actors = await prisma.actor.findMany()
   * 
   * // Get first 10 Actors
   * const actors = await prisma.actor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const actorWithIdOnly = await prisma.actor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ActorFindManyArgs>(args?: Prisma.SelectSubset<T, ActorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Actor.
   * @param {ActorCreateArgs} args - Arguments to create a Actor.
   * @example
   * // Create one Actor
   * const Actor = await prisma.actor.create({
   *   data: {
   *     // ... data to create a Actor
   *   }
   * })
   * 
   */
  create<T extends ActorCreateArgs>(args: Prisma.SelectSubset<T, ActorCreateArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Actors.
   * @param {ActorCreateManyArgs} args - Arguments to create many Actors.
   * @example
   * // Create many Actors
   * const actor = await prisma.actor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ActorCreateManyArgs>(args?: Prisma.SelectSubset<T, ActorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Actors and returns the data saved in the database.
   * @param {ActorCreateManyAndReturnArgs} args - Arguments to create many Actors.
   * @example
   * // Create many Actors
   * const actor = await prisma.actor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Actors and only return the `id`
   * const actorWithIdOnly = await prisma.actor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ActorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ActorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Actor.
   * @param {ActorDeleteArgs} args - Arguments to delete one Actor.
   * @example
   * // Delete one Actor
   * const Actor = await prisma.actor.delete({
   *   where: {
   *     // ... filter to delete one Actor
   *   }
   * })
   * 
   */
  delete<T extends ActorDeleteArgs>(args: Prisma.SelectSubset<T, ActorDeleteArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Actor.
   * @param {ActorUpdateArgs} args - Arguments to update one Actor.
   * @example
   * // Update one Actor
   * const actor = await prisma.actor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ActorUpdateArgs>(args: Prisma.SelectSubset<T, ActorUpdateArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Actors.
   * @param {ActorDeleteManyArgs} args - Arguments to filter Actors to delete.
   * @example
   * // Delete a few Actors
   * const { count } = await prisma.actor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ActorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ActorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Actors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Actors
   * const actor = await prisma.actor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ActorUpdateManyArgs>(args: Prisma.SelectSubset<T, ActorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Actors and returns the data updated in the database.
   * @param {ActorUpdateManyAndReturnArgs} args - Arguments to update many Actors.
   * @example
   * // Update many Actors
   * const actor = await prisma.actor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Actors and only return the `id`
   * const actorWithIdOnly = await prisma.actor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ActorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ActorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Actor.
   * @param {ActorUpsertArgs} args - Arguments to update or create a Actor.
   * @example
   * // Update or create a Actor
   * const actor = await prisma.actor.upsert({
   *   create: {
   *     // ... data to create a Actor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Actor we want to update
   *   }
   * })
   */
  upsert<T extends ActorUpsertArgs>(args: Prisma.SelectSubset<T, ActorUpsertArgs<ExtArgs>>): Prisma.Prisma__ActorClient<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Actors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorCountArgs} args - Arguments to filter Actors to count.
   * @example
   * // Count the number of Actors
   * const count = await prisma.actor.count({
   *   where: {
   *     // ... the filter for the Actors we want to count
   *   }
   * })
  **/
  count<T extends ActorCountArgs>(
    args?: Prisma.Subset<T, ActorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ActorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Actor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ActorAggregateArgs>(args: Prisma.Subset<T, ActorAggregateArgs>): Prisma.PrismaPromise<GetActorAggregateType<T>>

  /**
   * Group by Actor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ActorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ActorGroupByArgs['orderBy'] }
      : { orderBy?: ActorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ActorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Actor model
 */
readonly fields: ActorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Actor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Movie<T extends Prisma.Actor$MovieArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Actor$MovieArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Actor model
 */
export interface ActorFieldRefs {
  readonly id: Prisma.FieldRef<"Actor", 'Int'>
  readonly name: Prisma.FieldRef<"Actor", 'String'>
  readonly birthYear: Prisma.FieldRef<"Actor", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Actor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Actor", 'DateTime'>
  readonly movieId: Prisma.FieldRef<"Actor", 'Int'>
}
    

// Custom InputTypes
/**
 * Actor findUnique
 */
export type ActorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * Filter, which Actor to fetch.
   */
  where: Prisma.ActorWhereUniqueInput
}

/**
 * Actor findUniqueOrThrow
 */
export type ActorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * Filter, which Actor to fetch.
   */
  where: Prisma.ActorWhereUniqueInput
}

/**
 * Actor findFirst
 */
export type ActorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * Filter, which Actor to fetch.
   */
  where?: Prisma.ActorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorOrderByWithRelationInput | Prisma.ActorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Actors.
   */
  cursor?: Prisma.ActorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Actors.
   */
  distinct?: Prisma.ActorScalarFieldEnum | Prisma.ActorScalarFieldEnum[]
}

/**
 * Actor findFirstOrThrow
 */
export type ActorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * Filter, which Actor to fetch.
   */
  where?: Prisma.ActorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorOrderByWithRelationInput | Prisma.ActorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Actors.
   */
  cursor?: Prisma.ActorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Actors.
   */
  distinct?: Prisma.ActorScalarFieldEnum | Prisma.ActorScalarFieldEnum[]
}

/**
 * Actor findMany
 */
export type ActorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * Filter, which Actors to fetch.
   */
  where?: Prisma.ActorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Actors to fetch.
   */
  orderBy?: Prisma.ActorOrderByWithRelationInput | Prisma.ActorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Actors.
   */
  cursor?: Prisma.ActorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Actors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Actors.
   */
  skip?: number
  distinct?: Prisma.ActorScalarFieldEnum | Prisma.ActorScalarFieldEnum[]
}

/**
 * Actor create
 */
export type ActorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * The data needed to create a Actor.
   */
  data: Prisma.XOR<Prisma.ActorCreateInput, Prisma.ActorUncheckedCreateInput>
}

/**
 * Actor createMany
 */
export type ActorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Actors.
   */
  data: Prisma.ActorCreateManyInput | Prisma.ActorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Actor createManyAndReturn
 */
export type ActorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * The data used to create many Actors.
   */
  data: Prisma.ActorCreateManyInput | Prisma.ActorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Actor update
 */
export type ActorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * The data needed to update a Actor.
   */
  data: Prisma.XOR<Prisma.ActorUpdateInput, Prisma.ActorUncheckedUpdateInput>
  /**
   * Choose, which Actor to update.
   */
  where: Prisma.ActorWhereUniqueInput
}

/**
 * Actor updateMany
 */
export type ActorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Actors.
   */
  data: Prisma.XOR<Prisma.ActorUpdateManyMutationInput, Prisma.ActorUncheckedUpdateManyInput>
  /**
   * Filter which Actors to update
   */
  where?: Prisma.ActorWhereInput
  /**
   * Limit how many Actors to update.
   */
  limit?: number
}

/**
 * Actor updateManyAndReturn
 */
export type ActorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * The data used to update Actors.
   */
  data: Prisma.XOR<Prisma.ActorUpdateManyMutationInput, Prisma.ActorUncheckedUpdateManyInput>
  /**
   * Filter which Actors to update
   */
  where?: Prisma.ActorWhereInput
  /**
   * Limit how many Actors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Actor upsert
 */
export type ActorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * The filter to search for the Actor to update in case it exists.
   */
  where: Prisma.ActorWhereUniqueInput
  /**
   * In case the Actor found by the `where` argument doesn't exist, create a new Actor with this data.
   */
  create: Prisma.XOR<Prisma.ActorCreateInput, Prisma.ActorUncheckedCreateInput>
  /**
   * In case the Actor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ActorUpdateInput, Prisma.ActorUncheckedUpdateInput>
}

/**
 * Actor delete
 */
export type ActorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  /**
   * Filter which Actor to delete.
   */
  where: Prisma.ActorWhereUniqueInput
}

/**
 * Actor deleteMany
 */
export type ActorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Actors to delete
   */
  where?: Prisma.ActorWhereInput
  /**
   * Limit how many Actors to delete.
   */
  limit?: number
}

/**
 * Actor.Movie
 */
export type Actor$MovieArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  where?: Prisma.MovieWhereInput
}

/**
 * Actor without action
 */
export type ActorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
}
