
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Movie` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Movie
 * 
 */
export type MovieModel = runtime.Types.Result.DefaultSelection<Prisma.$MoviePayload>

export type AggregateMovie = {
  _count: MovieCountAggregateOutputType | null
  _avg: MovieAvgAggregateOutputType | null
  _sum: MovieSumAggregateOutputType | null
  _min: MovieMinAggregateOutputType | null
  _max: MovieMaxAggregateOutputType | null
}

export type MovieAvgAggregateOutputType = {
  id: number | null
  releaseYear: number | null
}

export type MovieSumAggregateOutputType = {
  id: number | null
  releaseYear: number | null
}

export type MovieMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
  director: string | null
  releaseYear: number | null
}

export type MovieMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
  director: string | null
  releaseYear: number | null
}

export type MovieCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  title: number
  director: number
  releaseYear: number
  _all: number
}


export type MovieAvgAggregateInputType = {
  id?: true
  releaseYear?: true
}

export type MovieSumAggregateInputType = {
  id?: true
  releaseYear?: true
}

export type MovieMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  director?: true
  releaseYear?: true
}

export type MovieMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  director?: true
  releaseYear?: true
}

export type MovieCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  director?: true
  releaseYear?: true
  _all?: true
}

export type MovieAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Movie to aggregate.
   */
  where?: Prisma.MovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MovieOrderByWithRelationInput | Prisma.MovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Movies
  **/
  _count?: true | MovieCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MovieAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MovieSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MovieMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MovieMaxAggregateInputType
}

export type GetMovieAggregateType<T extends MovieAggregateArgs> = {
      [P in keyof T & keyof AggregateMovie]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMovie[P]>
    : Prisma.GetScalarType<T[P], AggregateMovie[P]>
}




export type MovieGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MovieWhereInput
  orderBy?: Prisma.MovieOrderByWithAggregationInput | Prisma.MovieOrderByWithAggregationInput[]
  by: Prisma.MovieScalarFieldEnum[] | Prisma.MovieScalarFieldEnum
  having?: Prisma.MovieScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MovieCountAggregateInputType | true
  _avg?: MovieAvgAggregateInputType
  _sum?: MovieSumAggregateInputType
  _min?: MovieMinAggregateInputType
  _max?: MovieMaxAggregateInputType
}

export type MovieGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  title: string
  director: string
  releaseYear: number
  _count: MovieCountAggregateOutputType | null
  _avg: MovieAvgAggregateOutputType | null
  _sum: MovieSumAggregateOutputType | null
  _min: MovieMinAggregateOutputType | null
  _max: MovieMaxAggregateOutputType | null
}

type GetMovieGroupByPayload<T extends MovieGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MovieGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MovieGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MovieGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MovieGroupByOutputType[P]>
      }
    >
  >



export type MovieWhereInput = {
  AND?: Prisma.MovieWhereInput | Prisma.MovieWhereInput[]
  OR?: Prisma.MovieWhereInput[]
  NOT?: Prisma.MovieWhereInput | Prisma.MovieWhereInput[]
  id?: Prisma.IntFilter<"Movie"> | number
  createdAt?: Prisma.DateTimeFilter<"Movie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Movie"> | Date | string
  title?: Prisma.StringFilter<"Movie"> | string
  director?: Prisma.StringFilter<"Movie"> | string
  releaseYear?: Prisma.IntFilter<"Movie"> | number
  genres?: Prisma.GenreListRelationFilter
  actors?: Prisma.ActorListRelationFilter
}

export type MovieOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  director?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
  genres?: Prisma.GenreOrderByRelationAggregateInput
  actors?: Prisma.ActorOrderByRelationAggregateInput
}

export type MovieWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.MovieWhereInput | Prisma.MovieWhereInput[]
  OR?: Prisma.MovieWhereInput[]
  NOT?: Prisma.MovieWhereInput | Prisma.MovieWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Movie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Movie"> | Date | string
  title?: Prisma.StringFilter<"Movie"> | string
  director?: Prisma.StringFilter<"Movie"> | string
  releaseYear?: Prisma.IntFilter<"Movie"> | number
  genres?: Prisma.GenreListRelationFilter
  actors?: Prisma.ActorListRelationFilter
}, "id">

export type MovieOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  director?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
  _count?: Prisma.MovieCountOrderByAggregateInput
  _avg?: Prisma.MovieAvgOrderByAggregateInput
  _max?: Prisma.MovieMaxOrderByAggregateInput
  _min?: Prisma.MovieMinOrderByAggregateInput
  _sum?: Prisma.MovieSumOrderByAggregateInput
}

export type MovieScalarWhereWithAggregatesInput = {
  AND?: Prisma.MovieScalarWhereWithAggregatesInput | Prisma.MovieScalarWhereWithAggregatesInput[]
  OR?: Prisma.MovieScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MovieScalarWhereWithAggregatesInput | Prisma.MovieScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Movie"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Movie"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Movie"> | Date | string
  title?: Prisma.StringWithAggregatesFilter<"Movie"> | string
  director?: Prisma.StringWithAggregatesFilter<"Movie"> | string
  releaseYear?: Prisma.IntWithAggregatesFilter<"Movie"> | number
}

export type MovieCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
  genres?: Prisma.GenreCreateNestedManyWithoutMoviesInput
  actors?: Prisma.ActorCreateNestedManyWithoutMovieInput
}

export type MovieUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
  genres?: Prisma.GenreUncheckedCreateNestedManyWithoutMoviesInput
  actors?: Prisma.ActorUncheckedCreateNestedManyWithoutMovieInput
}

export type MovieUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.GenreUpdateManyWithoutMoviesNestedInput
  actors?: Prisma.ActorUpdateManyWithoutMovieNestedInput
}

export type MovieUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.GenreUncheckedUpdateManyWithoutMoviesNestedInput
  actors?: Prisma.ActorUncheckedUpdateManyWithoutMovieNestedInput
}

export type MovieCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
}

export type MovieUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MovieUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
}

export type MovieCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  director?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
}

export type MovieAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
}

export type MovieMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  director?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
}

export type MovieMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  director?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
}

export type MovieSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  releaseYear?: Prisma.SortOrder
}

export type MovieListRelationFilter = {
  every?: Prisma.MovieWhereInput
  some?: Prisma.MovieWhereInput
  none?: Prisma.MovieWhereInput
}

export type MovieOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MovieNullableScalarRelationFilter = {
  is?: Prisma.MovieWhereInput | null
  isNot?: Prisma.MovieWhereInput | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MovieCreateNestedManyWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.MovieCreateWithoutGenresInput, Prisma.MovieUncheckedCreateWithoutGenresInput> | Prisma.MovieCreateWithoutGenresInput[] | Prisma.MovieUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.MovieCreateOrConnectWithoutGenresInput | Prisma.MovieCreateOrConnectWithoutGenresInput[]
  connect?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
}

export type MovieUncheckedCreateNestedManyWithoutGenresInput = {
  create?: Prisma.XOR<Prisma.MovieCreateWithoutGenresInput, Prisma.MovieUncheckedCreateWithoutGenresInput> | Prisma.MovieCreateWithoutGenresInput[] | Prisma.MovieUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.MovieCreateOrConnectWithoutGenresInput | Prisma.MovieCreateOrConnectWithoutGenresInput[]
  connect?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
}

export type MovieUpdateManyWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.MovieCreateWithoutGenresInput, Prisma.MovieUncheckedCreateWithoutGenresInput> | Prisma.MovieCreateWithoutGenresInput[] | Prisma.MovieUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.MovieCreateOrConnectWithoutGenresInput | Prisma.MovieCreateOrConnectWithoutGenresInput[]
  upsert?: Prisma.MovieUpsertWithWhereUniqueWithoutGenresInput | Prisma.MovieUpsertWithWhereUniqueWithoutGenresInput[]
  set?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  disconnect?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  delete?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  connect?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  update?: Prisma.MovieUpdateWithWhereUniqueWithoutGenresInput | Prisma.MovieUpdateWithWhereUniqueWithoutGenresInput[]
  updateMany?: Prisma.MovieUpdateManyWithWhereWithoutGenresInput | Prisma.MovieUpdateManyWithWhereWithoutGenresInput[]
  deleteMany?: Prisma.MovieScalarWhereInput | Prisma.MovieScalarWhereInput[]
}

export type MovieUncheckedUpdateManyWithoutGenresNestedInput = {
  create?: Prisma.XOR<Prisma.MovieCreateWithoutGenresInput, Prisma.MovieUncheckedCreateWithoutGenresInput> | Prisma.MovieCreateWithoutGenresInput[] | Prisma.MovieUncheckedCreateWithoutGenresInput[]
  connectOrCreate?: Prisma.MovieCreateOrConnectWithoutGenresInput | Prisma.MovieCreateOrConnectWithoutGenresInput[]
  upsert?: Prisma.MovieUpsertWithWhereUniqueWithoutGenresInput | Prisma.MovieUpsertWithWhereUniqueWithoutGenresInput[]
  set?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  disconnect?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  delete?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  connect?: Prisma.MovieWhereUniqueInput | Prisma.MovieWhereUniqueInput[]
  update?: Prisma.MovieUpdateWithWhereUniqueWithoutGenresInput | Prisma.MovieUpdateWithWhereUniqueWithoutGenresInput[]
  updateMany?: Prisma.MovieUpdateManyWithWhereWithoutGenresInput | Prisma.MovieUpdateManyWithWhereWithoutGenresInput[]
  deleteMany?: Prisma.MovieScalarWhereInput | Prisma.MovieScalarWhereInput[]
}

export type MovieCreateNestedOneWithoutActorsInput = {
  create?: Prisma.XOR<Prisma.MovieCreateWithoutActorsInput, Prisma.MovieUncheckedCreateWithoutActorsInput>
  connectOrCreate?: Prisma.MovieCreateOrConnectWithoutActorsInput
  connect?: Prisma.MovieWhereUniqueInput
}

export type MovieUpdateOneWithoutActorsNestedInput = {
  create?: Prisma.XOR<Prisma.MovieCreateWithoutActorsInput, Prisma.MovieUncheckedCreateWithoutActorsInput>
  connectOrCreate?: Prisma.MovieCreateOrConnectWithoutActorsInput
  upsert?: Prisma.MovieUpsertWithoutActorsInput
  disconnect?: Prisma.MovieWhereInput | boolean
  delete?: Prisma.MovieWhereInput | boolean
  connect?: Prisma.MovieWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MovieUpdateToOneWithWhereWithoutActorsInput, Prisma.MovieUpdateWithoutActorsInput>, Prisma.MovieUncheckedUpdateWithoutActorsInput>
}

export type MovieCreateWithoutGenresInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
  actors?: Prisma.ActorCreateNestedManyWithoutMovieInput
}

export type MovieUncheckedCreateWithoutGenresInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
  actors?: Prisma.ActorUncheckedCreateNestedManyWithoutMovieInput
}

export type MovieCreateOrConnectWithoutGenresInput = {
  where: Prisma.MovieWhereUniqueInput
  create: Prisma.XOR<Prisma.MovieCreateWithoutGenresInput, Prisma.MovieUncheckedCreateWithoutGenresInput>
}

export type MovieUpsertWithWhereUniqueWithoutGenresInput = {
  where: Prisma.MovieWhereUniqueInput
  update: Prisma.XOR<Prisma.MovieUpdateWithoutGenresInput, Prisma.MovieUncheckedUpdateWithoutGenresInput>
  create: Prisma.XOR<Prisma.MovieCreateWithoutGenresInput, Prisma.MovieUncheckedCreateWithoutGenresInput>
}

export type MovieUpdateWithWhereUniqueWithoutGenresInput = {
  where: Prisma.MovieWhereUniqueInput
  data: Prisma.XOR<Prisma.MovieUpdateWithoutGenresInput, Prisma.MovieUncheckedUpdateWithoutGenresInput>
}

export type MovieUpdateManyWithWhereWithoutGenresInput = {
  where: Prisma.MovieScalarWhereInput
  data: Prisma.XOR<Prisma.MovieUpdateManyMutationInput, Prisma.MovieUncheckedUpdateManyWithoutGenresInput>
}

export type MovieScalarWhereInput = {
  AND?: Prisma.MovieScalarWhereInput | Prisma.MovieScalarWhereInput[]
  OR?: Prisma.MovieScalarWhereInput[]
  NOT?: Prisma.MovieScalarWhereInput | Prisma.MovieScalarWhereInput[]
  id?: Prisma.IntFilter<"Movie"> | number
  createdAt?: Prisma.DateTimeFilter<"Movie"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Movie"> | Date | string
  title?: Prisma.StringFilter<"Movie"> | string
  director?: Prisma.StringFilter<"Movie"> | string
  releaseYear?: Prisma.IntFilter<"Movie"> | number
}

export type MovieCreateWithoutActorsInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
  genres?: Prisma.GenreCreateNestedManyWithoutMoviesInput
}

export type MovieUncheckedCreateWithoutActorsInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  director: string
  releaseYear: number
  genres?: Prisma.GenreUncheckedCreateNestedManyWithoutMoviesInput
}

export type MovieCreateOrConnectWithoutActorsInput = {
  where: Prisma.MovieWhereUniqueInput
  create: Prisma.XOR<Prisma.MovieCreateWithoutActorsInput, Prisma.MovieUncheckedCreateWithoutActorsInput>
}

export type MovieUpsertWithoutActorsInput = {
  update: Prisma.XOR<Prisma.MovieUpdateWithoutActorsInput, Prisma.MovieUncheckedUpdateWithoutActorsInput>
  create: Prisma.XOR<Prisma.MovieCreateWithoutActorsInput, Prisma.MovieUncheckedCreateWithoutActorsInput>
  where?: Prisma.MovieWhereInput
}

export type MovieUpdateToOneWithWhereWithoutActorsInput = {
  where?: Prisma.MovieWhereInput
  data: Prisma.XOR<Prisma.MovieUpdateWithoutActorsInput, Prisma.MovieUncheckedUpdateWithoutActorsInput>
}

export type MovieUpdateWithoutActorsInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.GenreUpdateManyWithoutMoviesNestedInput
}

export type MovieUncheckedUpdateWithoutActorsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
  genres?: Prisma.GenreUncheckedUpdateManyWithoutMoviesNestedInput
}

export type MovieUpdateWithoutGenresInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
  actors?: Prisma.ActorUpdateManyWithoutMovieNestedInput
}

export type MovieUncheckedUpdateWithoutGenresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
  actors?: Prisma.ActorUncheckedUpdateManyWithoutMovieNestedInput
}

export type MovieUncheckedUpdateManyWithoutGenresInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  director?: Prisma.StringFieldUpdateOperationsInput | string
  releaseYear?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type MovieCountOutputType
 */

export type MovieCountOutputType = {
  genres: number
  actors: number
}

export type MovieCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  genres?: boolean | MovieCountOutputTypeCountGenresArgs
  actors?: boolean | MovieCountOutputTypeCountActorsArgs
}

/**
 * MovieCountOutputType without action
 */
export type MovieCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MovieCountOutputType
   */
  select?: Prisma.MovieCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MovieCountOutputType without action
 */
export type MovieCountOutputTypeCountGenresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GenreWhereInput
}

/**
 * MovieCountOutputType without action
 */
export type MovieCountOutputTypeCountActorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ActorWhereInput
}


export type MovieSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  director?: boolean
  releaseYear?: boolean
  genres?: boolean | Prisma.Movie$genresArgs<ExtArgs>
  actors?: boolean | Prisma.Movie$actorsArgs<ExtArgs>
  _count?: boolean | Prisma.MovieCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["movie"]>

export type MovieSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  director?: boolean
  releaseYear?: boolean
}, ExtArgs["result"]["movie"]>

export type MovieSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  director?: boolean
  releaseYear?: boolean
}, ExtArgs["result"]["movie"]>

export type MovieSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  director?: boolean
  releaseYear?: boolean
}

export type MovieOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "title" | "director" | "releaseYear", ExtArgs["result"]["movie"]>
export type MovieInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  genres?: boolean | Prisma.Movie$genresArgs<ExtArgs>
  actors?: boolean | Prisma.Movie$actorsArgs<ExtArgs>
  _count?: boolean | Prisma.MovieCountOutputTypeDefaultArgs<ExtArgs>
}
export type MovieIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type MovieIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $MoviePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Movie"
  objects: {
    genres: Prisma.$GenrePayload<ExtArgs>[]
    actors: Prisma.$ActorPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    title: string
    director: string
    releaseYear: number
  }, ExtArgs["result"]["movie"]>
  composites: {}
}

export type MovieGetPayload<S extends boolean | null | undefined | MovieDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MoviePayload, S>

export type MovieCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MovieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MovieCountAggregateInputType | true
  }

export interface MovieDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movie'], meta: { name: 'Movie' } }
  /**
   * Find zero or one Movie that matches the filter.
   * @param {MovieFindUniqueArgs} args - Arguments to find a Movie
   * @example
   * // Get one Movie
   * const movie = await prisma.movie.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MovieFindUniqueArgs>(args: Prisma.SelectSubset<T, MovieFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Movie that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MovieFindUniqueOrThrowArgs} args - Arguments to find a Movie
   * @example
   * // Get one Movie
   * const movie = await prisma.movie.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MovieFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MovieFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Movie that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieFindFirstArgs} args - Arguments to find a Movie
   * @example
   * // Get one Movie
   * const movie = await prisma.movie.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MovieFindFirstArgs>(args?: Prisma.SelectSubset<T, MovieFindFirstArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Movie that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieFindFirstOrThrowArgs} args - Arguments to find a Movie
   * @example
   * // Get one Movie
   * const movie = await prisma.movie.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MovieFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MovieFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Movies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Movies
   * const movies = await prisma.movie.findMany()
   * 
   * // Get first 10 Movies
   * const movies = await prisma.movie.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MovieFindManyArgs>(args?: Prisma.SelectSubset<T, MovieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Movie.
   * @param {MovieCreateArgs} args - Arguments to create a Movie.
   * @example
   * // Create one Movie
   * const Movie = await prisma.movie.create({
   *   data: {
   *     // ... data to create a Movie
   *   }
   * })
   * 
   */
  create<T extends MovieCreateArgs>(args: Prisma.SelectSubset<T, MovieCreateArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Movies.
   * @param {MovieCreateManyArgs} args - Arguments to create many Movies.
   * @example
   * // Create many Movies
   * const movie = await prisma.movie.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MovieCreateManyArgs>(args?: Prisma.SelectSubset<T, MovieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Movies and returns the data saved in the database.
   * @param {MovieCreateManyAndReturnArgs} args - Arguments to create many Movies.
   * @example
   * // Create many Movies
   * const movie = await prisma.movie.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Movies and only return the `id`
   * const movieWithIdOnly = await prisma.movie.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MovieCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MovieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Movie.
   * @param {MovieDeleteArgs} args - Arguments to delete one Movie.
   * @example
   * // Delete one Movie
   * const Movie = await prisma.movie.delete({
   *   where: {
   *     // ... filter to delete one Movie
   *   }
   * })
   * 
   */
  delete<T extends MovieDeleteArgs>(args: Prisma.SelectSubset<T, MovieDeleteArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Movie.
   * @param {MovieUpdateArgs} args - Arguments to update one Movie.
   * @example
   * // Update one Movie
   * const movie = await prisma.movie.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MovieUpdateArgs>(args: Prisma.SelectSubset<T, MovieUpdateArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Movies.
   * @param {MovieDeleteManyArgs} args - Arguments to filter Movies to delete.
   * @example
   * // Delete a few Movies
   * const { count } = await prisma.movie.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MovieDeleteManyArgs>(args?: Prisma.SelectSubset<T, MovieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Movies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Movies
   * const movie = await prisma.movie.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MovieUpdateManyArgs>(args: Prisma.SelectSubset<T, MovieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Movies and returns the data updated in the database.
   * @param {MovieUpdateManyAndReturnArgs} args - Arguments to update many Movies.
   * @example
   * // Update many Movies
   * const movie = await prisma.movie.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Movies and only return the `id`
   * const movieWithIdOnly = await prisma.movie.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MovieUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MovieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Movie.
   * @param {MovieUpsertArgs} args - Arguments to update or create a Movie.
   * @example
   * // Update or create a Movie
   * const movie = await prisma.movie.upsert({
   *   create: {
   *     // ... data to create a Movie
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Movie we want to update
   *   }
   * })
   */
  upsert<T extends MovieUpsertArgs>(args: Prisma.SelectSubset<T, MovieUpsertArgs<ExtArgs>>): Prisma.Prisma__MovieClient<runtime.Types.Result.GetResult<Prisma.$MoviePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Movies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieCountArgs} args - Arguments to filter Movies to count.
   * @example
   * // Count the number of Movies
   * const count = await prisma.movie.count({
   *   where: {
   *     // ... the filter for the Movies we want to count
   *   }
   * })
  **/
  count<T extends MovieCountArgs>(
    args?: Prisma.Subset<T, MovieCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MovieCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Movie.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MovieAggregateArgs>(args: Prisma.Subset<T, MovieAggregateArgs>): Prisma.PrismaPromise<GetMovieAggregateType<T>>

  /**
   * Group by Movie.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MovieGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MovieGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MovieGroupByArgs['orderBy'] }
      : { orderBy?: MovieGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Movie model
 */
readonly fields: MovieFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Movie.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MovieClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  genres<T extends Prisma.Movie$genresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Movie$genresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  actors<T extends Prisma.Movie$actorsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Movie$actorsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Movie model
 */
export interface MovieFieldRefs {
  readonly id: Prisma.FieldRef<"Movie", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Movie", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Movie", 'DateTime'>
  readonly title: Prisma.FieldRef<"Movie", 'String'>
  readonly director: Prisma.FieldRef<"Movie", 'String'>
  readonly releaseYear: Prisma.FieldRef<"Movie", 'Int'>
}
    

// Custom InputTypes
/**
 * Movie findUnique
 */
export type MovieFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * Filter, which Movie to fetch.
   */
  where: Prisma.MovieWhereUniqueInput
}

/**
 * Movie findUniqueOrThrow
 */
export type MovieFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * Filter, which Movie to fetch.
   */
  where: Prisma.MovieWhereUniqueInput
}

/**
 * Movie findFirst
 */
export type MovieFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * Filter, which Movie to fetch.
   */
  where?: Prisma.MovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MovieOrderByWithRelationInput | Prisma.MovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Movies.
   */
  cursor?: Prisma.MovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Movies.
   */
  distinct?: Prisma.MovieScalarFieldEnum | Prisma.MovieScalarFieldEnum[]
}

/**
 * Movie findFirstOrThrow
 */
export type MovieFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * Filter, which Movie to fetch.
   */
  where?: Prisma.MovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MovieOrderByWithRelationInput | Prisma.MovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Movies.
   */
  cursor?: Prisma.MovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Movies.
   */
  distinct?: Prisma.MovieScalarFieldEnum | Prisma.MovieScalarFieldEnum[]
}

/**
 * Movie findMany
 */
export type MovieFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * Filter, which Movies to fetch.
   */
  where?: Prisma.MovieWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Movies to fetch.
   */
  orderBy?: Prisma.MovieOrderByWithRelationInput | Prisma.MovieOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Movies.
   */
  cursor?: Prisma.MovieWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Movies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Movies.
   */
  skip?: number
  distinct?: Prisma.MovieScalarFieldEnum | Prisma.MovieScalarFieldEnum[]
}

/**
 * Movie create
 */
export type MovieCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * The data needed to create a Movie.
   */
  data: Prisma.XOR<Prisma.MovieCreateInput, Prisma.MovieUncheckedCreateInput>
}

/**
 * Movie createMany
 */
export type MovieCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Movies.
   */
  data: Prisma.MovieCreateManyInput | Prisma.MovieCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Movie createManyAndReturn
 */
export type MovieCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * The data used to create many Movies.
   */
  data: Prisma.MovieCreateManyInput | Prisma.MovieCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Movie update
 */
export type MovieUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * The data needed to update a Movie.
   */
  data: Prisma.XOR<Prisma.MovieUpdateInput, Prisma.MovieUncheckedUpdateInput>
  /**
   * Choose, which Movie to update.
   */
  where: Prisma.MovieWhereUniqueInput
}

/**
 * Movie updateMany
 */
export type MovieUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Movies.
   */
  data: Prisma.XOR<Prisma.MovieUpdateManyMutationInput, Prisma.MovieUncheckedUpdateManyInput>
  /**
   * Filter which Movies to update
   */
  where?: Prisma.MovieWhereInput
  /**
   * Limit how many Movies to update.
   */
  limit?: number
}

/**
 * Movie updateManyAndReturn
 */
export type MovieUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * The data used to update Movies.
   */
  data: Prisma.XOR<Prisma.MovieUpdateManyMutationInput, Prisma.MovieUncheckedUpdateManyInput>
  /**
   * Filter which Movies to update
   */
  where?: Prisma.MovieWhereInput
  /**
   * Limit how many Movies to update.
   */
  limit?: number
}

/**
 * Movie upsert
 */
export type MovieUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * The filter to search for the Movie to update in case it exists.
   */
  where: Prisma.MovieWhereUniqueInput
  /**
   * In case the Movie found by the `where` argument doesn't exist, create a new Movie with this data.
   */
  create: Prisma.XOR<Prisma.MovieCreateInput, Prisma.MovieUncheckedCreateInput>
  /**
   * In case the Movie was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MovieUpdateInput, Prisma.MovieUncheckedUpdateInput>
}

/**
 * Movie delete
 */
export type MovieDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
  /**
   * Filter which Movie to delete.
   */
  where: Prisma.MovieWhereUniqueInput
}

/**
 * Movie deleteMany
 */
export type MovieDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Movies to delete
   */
  where?: Prisma.MovieWhereInput
  /**
   * Limit how many Movies to delete.
   */
  limit?: number
}

/**
 * Movie.genres
 */
export type Movie$genresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Genre
   */
  select?: Prisma.GenreSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Genre
   */
  omit?: Prisma.GenreOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GenreInclude<ExtArgs> | null
  where?: Prisma.GenreWhereInput
  orderBy?: Prisma.GenreOrderByWithRelationInput | Prisma.GenreOrderByWithRelationInput[]
  cursor?: Prisma.GenreWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GenreScalarFieldEnum | Prisma.GenreScalarFieldEnum[]
}

/**
 * Movie.actors
 */
export type Movie$actorsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Actor
   */
  select?: Prisma.ActorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Actor
   */
  omit?: Prisma.ActorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActorInclude<ExtArgs> | null
  where?: Prisma.ActorWhereInput
  orderBy?: Prisma.ActorOrderByWithRelationInput | Prisma.ActorOrderByWithRelationInput[]
  cursor?: Prisma.ActorWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ActorScalarFieldEnum | Prisma.ActorScalarFieldEnum[]
}

/**
 * Movie without action
 */
export type MovieDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Movie
   */
  select?: Prisma.MovieSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Movie
   */
  omit?: Prisma.MovieOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MovieInclude<ExtArgs> | null
}
