/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: actor.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace actor {
    export class ActorsList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            actors?: dependency_1.base.Actor[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("actors" in data && data.actors != undefined) {
                    this.actors = data.actors;
                }
            }
        }
        get actors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.base.Actor, 1) as dependency_1.base.Actor[];
        }
        set actors(value: dependency_1.base.Actor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            actors?: ReturnType<typeof dependency_1.base.Actor.prototype.toObject>[];
        }): ActorsList {
            const message = new ActorsList({});
            if (data.actors != null) {
                message.actors = data.actors.map(item => dependency_1.base.Actor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                actors?: ReturnType<typeof dependency_1.base.Actor.prototype.toObject>[];
            } = {};
            if (this.actors != null) {
                data.actors = this.actors.map((item: dependency_1.base.Actor) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.actors.length)
                writer.writeRepeatedMessage(1, this.actors, (item: dependency_1.base.Actor) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActorsList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActorsList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.actors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.base.Actor.deserialize(reader), dependency_1.base.Actor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActorsList {
            return ActorsList.deserialize(bytes);
        }
    }
    export class ActorId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): ActorId {
            const message = new ActorId({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActorId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActorId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActorId {
            return ActorId.deserialize(bytes);
        }
    }
    export class CreateActor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            birthYear?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("birthYear" in data && data.birthYear != undefined) {
                    this.birthYear = data.birthYear;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get birthYear() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set birthYear(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            birthYear?: number;
        }): CreateActor {
            const message = new CreateActor({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.birthYear != null) {
                message.birthYear = data.birthYear;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                birthYear?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.birthYear != null) {
                data.birthYear = this.birthYear;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.birthYear != 0)
                writer.writeInt32(2, this.birthYear);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateActor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateActor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.birthYear = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateActor {
            return CreateActor.deserialize(bytes);
        }
    }
    export class UpdateActor extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            id?: number;
        } & (({
            name?: string;
        }) | ({
            birthYear?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("birthYear" in data && data.birthYear != undefined) {
                    this.birthYear = data.birthYear;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get birthYear() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set birthYear(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_birthYear() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _birthYear() {
            const cases: {
                [index: number]: "none" | "birthYear";
            } = {
                0: "none",
                3: "birthYear"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            birthYear?: number;
        }): UpdateActor {
            const message = new UpdateActor({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.birthYear != null) {
                message.birthYear = data.birthYear;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                birthYear?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.birthYear != null) {
                data.birthYear = this.birthYear;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_name)
                writer.writeString(2, this.name);
            if (this.has_birthYear)
                writer.writeInt32(3, this.birthYear);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateActor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateActor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.birthYear = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateActor {
            return UpdateActor.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedActorServiceService {
        static definition = {
            getAllActors: {
                path: "/actor.ActorService/getAllActors",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.base.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.base.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ActorsList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ActorsList.deserialize(new Uint8Array(bytes))
            },
            getActorById: {
                path: "/actor.ActorService/getActorById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ActorId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ActorId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Actor) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Actor.deserialize(new Uint8Array(bytes))
            },
            createActor: {
                path: "/actor.ActorService/createActor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateActor) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateActor.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Actor) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Actor.deserialize(new Uint8Array(bytes))
            },
            updateActor: {
                path: "/actor.ActorService/updateActor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateActor) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateActor.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Actor) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Actor.deserialize(new Uint8Array(bytes))
            },
            deleteActor: {
                path: "/actor.ActorService/deleteActor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ActorId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ActorId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getAllActors(call: grpc_1.ServerUnaryCall<dependency_1.base.Empty, ActorsList>, callback: grpc_1.sendUnaryData<ActorsList>): void;
        abstract getActorById(call: grpc_1.ServerUnaryCall<ActorId, dependency_1.base.Actor>, callback: grpc_1.sendUnaryData<dependency_1.base.Actor>): void;
        abstract createActor(call: grpc_1.ServerUnaryCall<CreateActor, dependency_1.base.Actor>, callback: grpc_1.sendUnaryData<dependency_1.base.Actor>): void;
        abstract updateActor(call: grpc_1.ServerUnaryCall<UpdateActor, dependency_1.base.Actor>, callback: grpc_1.sendUnaryData<dependency_1.base.Actor>): void;
        abstract deleteActor(call: grpc_1.ServerUnaryCall<ActorId, dependency_1.base.Empty>, callback: grpc_1.sendUnaryData<dependency_1.base.Empty>): void;
    }
    export class ActorServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedActorServiceService.definition, "ActorService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getAllActors: GrpcUnaryServiceInterface<dependency_1.base.Empty, ActorsList> = (message: dependency_1.base.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ActorsList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ActorsList>, callback?: grpc_1.requestCallback<ActorsList>): grpc_1.ClientUnaryCall => {
            return super.getAllActors(message, metadata, options, callback);
        };
        getActorById: GrpcUnaryServiceInterface<ActorId, dependency_1.base.Actor> = (message: ActorId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Actor>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Actor>, callback?: grpc_1.requestCallback<dependency_1.base.Actor>): grpc_1.ClientUnaryCall => {
            return super.getActorById(message, metadata, options, callback);
        };
        createActor: GrpcUnaryServiceInterface<CreateActor, dependency_1.base.Actor> = (message: CreateActor, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Actor>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Actor>, callback?: grpc_1.requestCallback<dependency_1.base.Actor>): grpc_1.ClientUnaryCall => {
            return super.createActor(message, metadata, options, callback);
        };
        updateActor: GrpcUnaryServiceInterface<UpdateActor, dependency_1.base.Actor> = (message: UpdateActor, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Actor>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Actor>, callback?: grpc_1.requestCallback<dependency_1.base.Actor>): grpc_1.ClientUnaryCall => {
            return super.updateActor(message, metadata, options, callback);
        };
        deleteActor: GrpcUnaryServiceInterface<ActorId, dependency_1.base.Empty> = (message: ActorId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Empty>, callback?: grpc_1.requestCallback<dependency_1.base.Empty>): grpc_1.ClientUnaryCall => {
            return super.deleteActor(message, metadata, options, callback);
        };
    }
}
