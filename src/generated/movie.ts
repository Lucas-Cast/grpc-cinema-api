/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: movie.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace movie {
    export class MoviesList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            movies?: dependency_1.base.Movie[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("movies" in data && data.movies != undefined) {
                    this.movies = data.movies;
                }
            }
        }
        get movies() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.base.Movie, 1) as dependency_1.base.Movie[];
        }
        set movies(value: dependency_1.base.Movie[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            movies?: ReturnType<typeof dependency_1.base.Movie.prototype.toObject>[];
        }): MoviesList {
            const message = new MoviesList({});
            if (data.movies != null) {
                message.movies = data.movies.map(item => dependency_1.base.Movie.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                movies?: ReturnType<typeof dependency_1.base.Movie.prototype.toObject>[];
            } = {};
            if (this.movies != null) {
                data.movies = this.movies.map((item: dependency_1.base.Movie) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.movies.length)
                writer.writeRepeatedMessage(1, this.movies, (item: dependency_1.base.Movie) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoviesList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoviesList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.movies, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.base.Movie.deserialize(reader), dependency_1.base.Movie));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MoviesList {
            return MoviesList.deserialize(bytes);
        }
    }
    export class MovieId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): MovieId {
            const message = new MovieId({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MovieId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MovieId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MovieId {
            return MovieId.deserialize(bytes);
        }
    }
    export class CreateMovie extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            director?: string;
            release_year?: number;
            genre_ids?: number[];
            actor_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("director" in data && data.director != undefined) {
                    this.director = data.director;
                }
                if ("release_year" in data && data.release_year != undefined) {
                    this.release_year = data.release_year;
                }
                if ("genre_ids" in data && data.genre_ids != undefined) {
                    this.genre_ids = data.genre_ids;
                }
                if ("actor_ids" in data && data.actor_ids != undefined) {
                    this.actor_ids = data.actor_ids;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get director() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set director(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get release_year() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set release_year(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get genre_ids() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set genre_ids(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get actor_ids() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set actor_ids(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            title?: string;
            director?: string;
            release_year?: number;
            genre_ids?: number[];
            actor_ids?: number[];
        }): CreateMovie {
            const message = new CreateMovie({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.director != null) {
                message.director = data.director;
            }
            if (data.release_year != null) {
                message.release_year = data.release_year;
            }
            if (data.genre_ids != null) {
                message.genre_ids = data.genre_ids;
            }
            if (data.actor_ids != null) {
                message.actor_ids = data.actor_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                director?: string;
                release_year?: number;
                genre_ids?: number[];
                actor_ids?: number[];
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.director != null) {
                data.director = this.director;
            }
            if (this.release_year != null) {
                data.release_year = this.release_year;
            }
            if (this.genre_ids != null) {
                data.genre_ids = this.genre_ids;
            }
            if (this.actor_ids != null) {
                data.actor_ids = this.actor_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.director.length)
                writer.writeString(2, this.director);
            if (this.release_year != 0)
                writer.writeInt32(3, this.release_year);
            if (this.genre_ids.length)
                writer.writePackedInt32(4, this.genre_ids);
            if (this.actor_ids.length)
                writer.writePackedInt32(5, this.actor_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMovie {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMovie();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.director = reader.readString();
                        break;
                    case 3:
                        message.release_year = reader.readInt32();
                        break;
                    case 4:
                        message.genre_ids = reader.readPackedInt32();
                        break;
                    case 5:
                        message.actor_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMovie {
            return CreateMovie.deserialize(bytes);
        }
    }
    export class UpdateMovie extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4]];
        constructor(data?: any[] | ({
            id?: number;
            genre_ids?: number[];
            actor_ids?: number[];
        } & (({
            title?: string;
        }) | ({
            director?: string;
        }) | ({
            release_year?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("director" in data && data.director != undefined) {
                    this.director = data.director;
                }
                if ("release_year" in data && data.release_year != undefined) {
                    this.release_year = data.release_year;
                }
                if ("genre_ids" in data && data.genre_ids != undefined) {
                    this.genre_ids = data.genre_ids;
                }
                if ("actor_ids" in data && data.actor_ids != undefined) {
                    this.actor_ids = data.actor_ids;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_title() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get director() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set director(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_director() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get release_year() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set release_year(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_release_year() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get genre_ids() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set genre_ids(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get actor_ids() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set actor_ids(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get _title() {
            const cases: {
                [index: number]: "none" | "title";
            } = {
                0: "none",
                2: "title"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _director() {
            const cases: {
                [index: number]: "none" | "director";
            } = {
                0: "none",
                3: "director"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _release_year() {
            const cases: {
                [index: number]: "none" | "release_year";
            } = {
                0: "none",
                4: "release_year"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            director?: string;
            release_year?: number;
            genre_ids?: number[];
            actor_ids?: number[];
        }): UpdateMovie {
            const message = new UpdateMovie({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.director != null) {
                message.director = data.director;
            }
            if (data.release_year != null) {
                message.release_year = data.release_year;
            }
            if (data.genre_ids != null) {
                message.genre_ids = data.genre_ids;
            }
            if (data.actor_ids != null) {
                message.actor_ids = data.actor_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                director?: string;
                release_year?: number;
                genre_ids?: number[];
                actor_ids?: number[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.director != null) {
                data.director = this.director;
            }
            if (this.release_year != null) {
                data.release_year = this.release_year;
            }
            if (this.genre_ids != null) {
                data.genre_ids = this.genre_ids;
            }
            if (this.actor_ids != null) {
                data.actor_ids = this.actor_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_title)
                writer.writeString(2, this.title);
            if (this.has_director)
                writer.writeString(3, this.director);
            if (this.has_release_year)
                writer.writeInt32(4, this.release_year);
            if (this.genre_ids.length)
                writer.writePackedInt32(5, this.genre_ids);
            if (this.actor_ids.length)
                writer.writePackedInt32(6, this.actor_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMovie {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMovie();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.director = reader.readString();
                        break;
                    case 4:
                        message.release_year = reader.readInt32();
                        break;
                    case 5:
                        message.genre_ids = reader.readPackedInt32();
                        break;
                    case 6:
                        message.actor_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateMovie {
            return UpdateMovie.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMovieServiceService {
        static definition = {
            getAllMovies: {
                path: "/movie.MovieService/getAllMovies",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.base.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.base.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MoviesList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MoviesList.deserialize(new Uint8Array(bytes))
            },
            getMovieById: {
                path: "/movie.MovieService/getMovieById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MovieId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MovieId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Movie) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Movie.deserialize(new Uint8Array(bytes))
            },
            createMovie: {
                path: "/movie.MovieService/createMovie",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateMovie) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateMovie.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Movie) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Movie.deserialize(new Uint8Array(bytes))
            },
            updateMovie: {
                path: "/movie.MovieService/updateMovie",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateMovie) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateMovie.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Movie) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Movie.deserialize(new Uint8Array(bytes))
            },
            deleteMovie: {
                path: "/movie.MovieService/deleteMovie",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MovieId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MovieId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getAllMovies(call: grpc_1.ServerUnaryCall<dependency_1.base.Empty, MoviesList>, callback: grpc_1.sendUnaryData<MoviesList>): void;
        abstract getMovieById(call: grpc_1.ServerUnaryCall<MovieId, dependency_1.base.Movie>, callback: grpc_1.sendUnaryData<dependency_1.base.Movie>): void;
        abstract createMovie(call: grpc_1.ServerUnaryCall<CreateMovie, dependency_1.base.Movie>, callback: grpc_1.sendUnaryData<dependency_1.base.Movie>): void;
        abstract updateMovie(call: grpc_1.ServerUnaryCall<UpdateMovie, dependency_1.base.Movie>, callback: grpc_1.sendUnaryData<dependency_1.base.Movie>): void;
        abstract deleteMovie(call: grpc_1.ServerUnaryCall<MovieId, dependency_1.base.Empty>, callback: grpc_1.sendUnaryData<dependency_1.base.Empty>): void;
    }
    export class MovieServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMovieServiceService.definition, "MovieService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getAllMovies: GrpcUnaryServiceInterface<dependency_1.base.Empty, MoviesList> = (message: dependency_1.base.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MoviesList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MoviesList>, callback?: grpc_1.requestCallback<MoviesList>): grpc_1.ClientUnaryCall => {
            return super.getAllMovies(message, metadata, options, callback);
        };
        getMovieById: GrpcUnaryServiceInterface<MovieId, dependency_1.base.Movie> = (message: MovieId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Movie>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Movie>, callback?: grpc_1.requestCallback<dependency_1.base.Movie>): grpc_1.ClientUnaryCall => {
            return super.getMovieById(message, metadata, options, callback);
        };
        createMovie: GrpcUnaryServiceInterface<CreateMovie, dependency_1.base.Movie> = (message: CreateMovie, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Movie>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Movie>, callback?: grpc_1.requestCallback<dependency_1.base.Movie>): grpc_1.ClientUnaryCall => {
            return super.createMovie(message, metadata, options, callback);
        };
        updateMovie: GrpcUnaryServiceInterface<UpdateMovie, dependency_1.base.Movie> = (message: UpdateMovie, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Movie>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Movie>, callback?: grpc_1.requestCallback<dependency_1.base.Movie>): grpc_1.ClientUnaryCall => {
            return super.updateMovie(message, metadata, options, callback);
        };
        deleteMovie: GrpcUnaryServiceInterface<MovieId, dependency_1.base.Empty> = (message: MovieId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Empty>, callback?: grpc_1.requestCallback<dependency_1.base.Empty>): grpc_1.ClientUnaryCall => {
            return super.deleteMovie(message, metadata, options, callback);
        };
    }
}
