/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.32.1
 * source: genre.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace genre {
    export class GenresList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            genres?: dependency_1.base.Genre[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("genres" in data && data.genres != undefined) {
                    this.genres = data.genres;
                }
            }
        }
        get genres() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.base.Genre, 1) as dependency_1.base.Genre[];
        }
        set genres(value: dependency_1.base.Genre[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            genres?: ReturnType<typeof dependency_1.base.Genre.prototype.toObject>[];
        }): GenresList {
            const message = new GenresList({});
            if (data.genres != null) {
                message.genres = data.genres.map(item => dependency_1.base.Genre.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                genres?: ReturnType<typeof dependency_1.base.Genre.prototype.toObject>[];
            } = {};
            if (this.genres != null) {
                data.genres = this.genres.map((item: dependency_1.base.Genre) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.genres.length)
                writer.writeRepeatedMessage(1, this.genres, (item: dependency_1.base.Genre) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenresList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenresList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.genres, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.base.Genre.deserialize(reader), dependency_1.base.Genre));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenresList {
            return GenresList.deserialize(bytes);
        }
    }
    export class GenreId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): GenreId {
            const message = new GenreId({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenreId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenreId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenreId {
            return GenreId.deserialize(bytes);
        }
    }
    export class CreateGenre extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            movieIds?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("movieIds" in data && data.movieIds != undefined) {
                    this.movieIds = data.movieIds;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get movieIds() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set movieIds(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            movieIds?: number[];
        }): CreateGenre {
            const message = new CreateGenre({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.movieIds != null) {
                message.movieIds = data.movieIds;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                movieIds?: number[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.movieIds != null) {
                data.movieIds = this.movieIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.movieIds.length)
                writer.writePackedInt32(2, this.movieIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGenre {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGenre();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.movieIds = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateGenre {
            return CreateGenre.deserialize(bytes);
        }
    }
    export class UpdateGenre extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            id?: number;
            movieIds?: number[];
        } & (({
            name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("movieIds" in data && data.movieIds != undefined) {
                    this.movieIds = data.movieIds;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get movieIds() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set movieIds(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            movieIds?: number[];
        }): UpdateGenre {
            const message = new UpdateGenre({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.movieIds != null) {
                message.movieIds = data.movieIds;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                movieIds?: number[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.movieIds != null) {
                data.movieIds = this.movieIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_name)
                writer.writeString(2, this.name);
            if (this.movieIds.length)
                writer.writePackedInt32(3, this.movieIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGenre {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGenre();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.movieIds = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateGenre {
            return UpdateGenre.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGenreServiceService {
        static definition = {
            getAllGenres: {
                path: "/genre.GenreService/getAllGenres",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.base.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.base.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenresList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenresList.deserialize(new Uint8Array(bytes))
            },
            getGenreById: {
                path: "/genre.GenreService/getGenreById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenreId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenreId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Genre) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Genre.deserialize(new Uint8Array(bytes))
            },
            createGenre: {
                path: "/genre.GenreService/createGenre",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateGenre) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateGenre.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Genre) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Genre.deserialize(new Uint8Array(bytes))
            },
            updateGenre: {
                path: "/genre.GenreService/updateGenre",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateGenre) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateGenre.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Genre) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Genre.deserialize(new Uint8Array(bytes))
            },
            deleteGenre: {
                path: "/genre.GenreService/deleteGenre",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenreId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenreId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.base.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.base.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getAllGenres(call: grpc_1.ServerUnaryCall<dependency_1.base.Empty, GenresList>, callback: grpc_1.sendUnaryData<GenresList>): void;
        abstract getGenreById(call: grpc_1.ServerUnaryCall<GenreId, dependency_1.base.Genre>, callback: grpc_1.sendUnaryData<dependency_1.base.Genre>): void;
        abstract createGenre(call: grpc_1.ServerUnaryCall<CreateGenre, dependency_1.base.Genre>, callback: grpc_1.sendUnaryData<dependency_1.base.Genre>): void;
        abstract updateGenre(call: grpc_1.ServerUnaryCall<UpdateGenre, dependency_1.base.Genre>, callback: grpc_1.sendUnaryData<dependency_1.base.Genre>): void;
        abstract deleteGenre(call: grpc_1.ServerUnaryCall<GenreId, dependency_1.base.Empty>, callback: grpc_1.sendUnaryData<dependency_1.base.Empty>): void;
    }
    export class GenreServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGenreServiceService.definition, "GenreService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getAllGenres: GrpcUnaryServiceInterface<dependency_1.base.Empty, GenresList> = (message: dependency_1.base.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenresList>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenresList>, callback?: grpc_1.requestCallback<GenresList>): grpc_1.ClientUnaryCall => {
            return super.getAllGenres(message, metadata, options, callback);
        };
        getGenreById: GrpcUnaryServiceInterface<GenreId, dependency_1.base.Genre> = (message: GenreId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Genre>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Genre>, callback?: grpc_1.requestCallback<dependency_1.base.Genre>): grpc_1.ClientUnaryCall => {
            return super.getGenreById(message, metadata, options, callback);
        };
        createGenre: GrpcUnaryServiceInterface<CreateGenre, dependency_1.base.Genre> = (message: CreateGenre, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Genre>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Genre>, callback?: grpc_1.requestCallback<dependency_1.base.Genre>): grpc_1.ClientUnaryCall => {
            return super.createGenre(message, metadata, options, callback);
        };
        updateGenre: GrpcUnaryServiceInterface<UpdateGenre, dependency_1.base.Genre> = (message: UpdateGenre, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Genre>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Genre>, callback?: grpc_1.requestCallback<dependency_1.base.Genre>): grpc_1.ClientUnaryCall => {
            return super.updateGenre(message, metadata, options, callback);
        };
        deleteGenre: GrpcUnaryServiceInterface<GenreId, dependency_1.base.Empty> = (message: GenreId, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.base.Empty>, callback?: grpc_1.requestCallback<dependency_1.base.Empty>): grpc_1.ClientUnaryCall => {
            return super.deleteGenre(message, metadata, options, callback);
        };
    }
}
